// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RhDev.Customer.Component.Core.Impl.Data;

#nullable disable

namespace RhDev.Customer.Component.App.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240108094950_AuditTrails_Refs_Cascading2")]
    partial class AuditTrails_Refs_Cascading2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("RhDev.Common.Web.Core.DataAccess.SQL.Repository.Entities.Common.AuditTrail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AffectedColumns")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AuditType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("NewValues")
                        .HasColumnType("NVARCHAR(MAX)");

                    b.Property<string>("OldValues")
                        .HasColumnType("NVARCHAR(MAX)");

                    b.Property<string>("PrimaryKey")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(MAX)");

                    b.Property<string>("TableName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AuditTrails");
                });

            modelBuilder.Entity("RhDev.Common.Web.Core.DataAccess.SQL.Repository.Entities.Configuration.ApplicationUserSettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("Changed")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ChangedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Key" }, "IX_Key")
                        .IsUnique();

                    b.ToTable("ApplicationUserSettings");
                });

            modelBuilder.Entity("RhDev.Common.Web.Core.DataAccess.SQL.Repository.Entities.Utils.DayOff", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Day")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Repeat")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("DayOffs");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Day = new DateTime(2022, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Repeat = true,
                            Title = "Den obnovy samostatného českého státu"
                        },
                        new
                        {
                            Id = 2,
                            Day = new DateTime(2022, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Repeat = true,
                            Title = "Svátek práce"
                        },
                        new
                        {
                            Id = 3,
                            Day = new DateTime(2022, 5, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Repeat = true,
                            Title = "Den vítězství"
                        },
                        new
                        {
                            Id = 5,
                            Day = new DateTime(2022, 7, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Repeat = true,
                            Title = "Den slovanských věrozvěstů Cyrila a Metoděje"
                        },
                        new
                        {
                            Id = 6,
                            Day = new DateTime(2022, 7, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Repeat = true,
                            Title = "Den upálení mistra Jana Husa"
                        },
                        new
                        {
                            Id = 7,
                            Day = new DateTime(2022, 9, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Repeat = true,
                            Title = "Den české státnosti"
                        },
                        new
                        {
                            Id = 8,
                            Day = new DateTime(2022, 11, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Repeat = true,
                            Title = "Den boje za svobodu a demokracii"
                        },
                        new
                        {
                            Id = 9,
                            Day = new DateTime(2022, 12, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Repeat = true,
                            Title = "Štědrý den"
                        },
                        new
                        {
                            Id = 10,
                            Day = new DateTime(2022, 12, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Repeat = true,
                            Title = "1. svátek vánoční"
                        },
                        new
                        {
                            Id = 11,
                            Day = new DateTime(2022, 12, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Repeat = true,
                            Title = "2. svátek vánoční"
                        },
                        new
                        {
                            Id = 12,
                            Day = new DateTime(2022, 12, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Repeat = true,
                            Title = "2. svátek vánoční"
                        },
                        new
                        {
                            Id = 13,
                            Day = new DateTime(2023, 4, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Repeat = false,
                            Title = "Velký pátek"
                        },
                        new
                        {
                            Id = 14,
                            Day = new DateTime(2024, 3, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Repeat = false,
                            Title = "Velký pátek"
                        },
                        new
                        {
                            Id = 15,
                            Day = new DateTime(2025, 4, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Repeat = false,
                            Title = "Velký pátek"
                        },
                        new
                        {
                            Id = 16,
                            Day = new DateTime(2026, 4, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Repeat = false,
                            Title = "Velký pátek"
                        },
                        new
                        {
                            Id = 17,
                            Day = new DateTime(2027, 3, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Repeat = false,
                            Title = "Velký pátek"
                        },
                        new
                        {
                            Id = 18,
                            Day = new DateTime(2028, 4, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Repeat = false,
                            Title = "Velký pátek"
                        },
                        new
                        {
                            Id = 19,
                            Day = new DateTime(2029, 3, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Repeat = false,
                            Title = "Velký pátek"
                        },
                        new
                        {
                            Id = 20,
                            Day = new DateTime(2030, 4, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Repeat = false,
                            Title = "Velký pátek"
                        },
                        new
                        {
                            Id = 21,
                            Day = new DateTime(2023, 4, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Repeat = false,
                            Title = "Velikonoční pondělí"
                        },
                        new
                        {
                            Id = 22,
                            Day = new DateTime(2024, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Repeat = false,
                            Title = "Velikonoční pondělí"
                        },
                        new
                        {
                            Id = 23,
                            Day = new DateTime(2025, 4, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Repeat = false,
                            Title = "Velikonoční pondělí"
                        },
                        new
                        {
                            Id = 24,
                            Day = new DateTime(2026, 4, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Repeat = false,
                            Title = "Velikonoční pondělí"
                        },
                        new
                        {
                            Id = 25,
                            Day = new DateTime(2027, 3, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Repeat = false,
                            Title = "Velikonoční pondělí"
                        },
                        new
                        {
                            Id = 26,
                            Day = new DateTime(2028, 4, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Repeat = false,
                            Title = "Velikonoční pondělí"
                        },
                        new
                        {
                            Id = 27,
                            Day = new DateTime(2029, 4, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Repeat = false,
                            Title = "Velikonoční pondělí"
                        },
                        new
                        {
                            Id = 28,
                            Day = new DateTime(2030, 4, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Repeat = false,
                            Title = "Velikonoční pondělí"
                        });
                });

            modelBuilder.Entity("RhDev.Common.Web.Core.DataAccess.SQL.Repository.Entities.Utils.Logger", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AppIdentifier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClientAgent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClientIP")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CorrelationId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Exception")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Level")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LogEvent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MessageTemplate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Properties")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SourceContext")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Loggers");
                });

            modelBuilder.Entity("RhDev.Customer.Component.Core.Impl.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("RhDev.Customer.Component.Core.Impl.Data.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<long>("Population")
                        .HasColumnType("bigint");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("LastModifiedById");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("RhDev.Customer.Component.Core.Impl.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("RhDev.Customer.Component.Core.Impl.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RhDev.Customer.Component.Core.Impl.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("RhDev.Customer.Component.Core.Impl.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RhDev.Customer.Component.Core.Impl.Data.City", b =>
                {
                    b.HasOne("RhDev.Customer.Component.Core.Impl.Data.ApplicationUser", "CreatedBy")
                        .WithMany("AuthoredCities")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("RhDev.Customer.Component.Core.Impl.Data.ApplicationUser", "LastModifiedBy")
                        .WithMany("ModifiedCities")
                        .HasForeignKey("LastModifiedById")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("CreatedBy");

                    b.Navigation("LastModifiedBy");
                });

            modelBuilder.Entity("RhDev.Customer.Component.Core.Impl.Data.ApplicationUser", b =>
                {
                    b.Navigation("AuthoredCities");

                    b.Navigation("ModifiedCities");
                });
#pragma warning restore 612, 618
        }
    }
}
